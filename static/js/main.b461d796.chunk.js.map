{"version":3,"sources":["../../src/serviceWorker.js","../../src/Color.js","../../src/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","red","green","blue","hex","userInput","resultShow","RGB","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","upDateR","setState","show","Color","Number","value","document","querySelector","isColor","react_default","a","createElement","Color_Result","content","body","style","backgroundColor","className","placeholder","id","onClick","React","Component","HEXA","_this2","upDateH","event","key","length","concat","rgb","onKeyPress","Result","props","ColorSystem","_this3","rgbChange","hexaChange","hexa","app","Color_HEXA","Color_RGB","type","name","onChange","father","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b461d796.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Color from 'color-engine';\r\nlet red='',green='',blue='',hex='';\r\nlet userInput='';\r\nlet resultShow='';\r\nclass RGB extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            show:false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        red=document.querySelector('#red');\r\n        green=document.querySelector('#green');\r\n        blue=document.querySelector('#blue');\r\n    }\r\n    upDateR=()=>{\r\n        this.setState({show:true});\r\n        userInput=new Color([Number(red.value),Number(green.value),Number(blue.value)]);\r\n        red.value='';green.value='';blue.value='';\r\n    }\r\n    componentWillUpdate(){\r\n        if (userInput.isColor){\r\n            resultShow=<Result content={userInput.hex}/>\r\n            document.body.style.backgroundColor=userInput.hex;\r\n        } else {\r\n            resultShow=<Result content=\"Enter a Valid Color\"/>\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n        <div>\r\n            <div className=\"row spes2 form-inline\">\r\n                <input className=\"form-control\" placeholder=\"R\" id=\"red\"/>\r\n                <input className=\"form-control\" placeholder=\"G\" id=\"green\"/>\r\n                <input className=\"form-control\" placeholder=\"B\" id=\"blue\"/>\r\n                <button className=\"btn btn-neutral\" onClick={this.upDateR} >Submit</button>\r\n            </div>\r\n            {resultShow}\r\n        </div>\r\n        )\r\n    }\r\n}\r\nclass HEXA extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            show:false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        hex=document.querySelector(\"#hexa-id\");\r\n    }\r\n    upDateH=(event)=>{\r\n        if (event.key === 'Enter'){\r\n            if (hex.value.length===3){\r\n                hex.value=`${hex.value[0]}${hex.value[0]}${hex.value[1]}${hex.value[1]}${hex.value[2]}${hex.value[2]}`\r\n            }\r\n            userInput=new Color(hex.value);\r\n            hex.value='';\r\n            this.setState({show:true})\r\n        }\r\n    }\r\n    componentWillUpdate(){\r\n        if (userInput.isColor){\r\n            resultShow=<Result content={`rgb(${userInput.rgb[0]},${userInput.rgb[1]},${userInput.rgb[2]})`}/>\r\n            document.body.style.backgroundColor=userInput.hex;\r\n        } else {\r\n            resultShow=<Result content=\"Enter a Valid Color\"/>\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div className=\"form-group spes3\">\r\n                <span>#</span>\r\n                <input className=\"form-control\" placeholder=\"Hexa-Color\" id=\"hexa-id\" onKeyPress={this.upDateH}/>\r\n            </div>\r\n            {resultShow}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Result extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"alert alert-success\">\r\n                {this.props.content}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass ColorSystem extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            red:'',\r\n            green:'',\r\n            blue:'',\r\n            hexa:'',\r\n            HEXA:false,\r\n            RGB:false\r\n        }\r\n    }\r\n    rgbChange=()=>{\r\n        this.setState({HEXA:false,RGB:true});\r\n    }\r\n    hexaChange=()=>{\r\n        this.setState({HEXA:true,RGB:false});\r\n    }\r\n    render(){\r\n        let app='';\r\n        if (this.state.HEXA){\r\n            resultShow='';\r\n            app=<HEXA />\r\n        } else if (this.state.RGB){\r\n            resultShow='';\r\n            app=<RGB />\r\n        }\r\n        return(\r\n        <div>\r\n            <div className=\"form-check form-check-radio\">\r\n                <label className=\"form-check-label\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name=\"colorType\" id=\"hexa\" value=\"hexa\" onChange={this.hexaChange}/>\r\n                    <span className=\"form-check-sign\"></span>\r\n                        Hexa\r\n                </label>\r\n            </div>\r\n            <div className=\"form-check form-check-radio\">\r\n                <label className=\"form-check-label\">\r\n                    <input className=\"form-check-input\" type=\"radio\" name=\"colorType\" id=\"rgb\" value=\"rgb\" onChange={this.rgbChange}/>\r\n                    <span className=\"form-check-sign\"></span>\r\n                        RGB\r\n                </label>\r\n            </div>\r\n            {app}\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default ColorSystem;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\nimport ColorSystem from './Color';\n\n\nlet father=document.querySelector(\".controler\");\n\nReactDOM.render(<ColorSystem />, father);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}